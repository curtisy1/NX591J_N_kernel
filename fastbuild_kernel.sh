#!/bin/bash
### DO NOT EDIT THIS FILE ###
app_build_root=`pwd`
echo ${app_build_root}

#INIT_TARGET_PRODUCT=$1
#FINAL_TARGET_PRODUCT=$1
INIT_TARGET_PRODUCT=NX591J
FINAL_TARGET_PRODUCT=NX591J

#KERNEL_PERF_DEFCONFIG=$2
KERNEL_PERF_DEFCONFIG=perf

function usage()
{
cat<<EOF

[01;32m===========================================================[0m
[0m[01;31mFast build kernel[0m
[0m[01;31mUsage:[0m
	1. fastbuild_kernel.sh NX591J
	2. fastbuild_kernel.sh NX591J perf
[01;32m===========================================================[0m

EOF
}

#if [ ! -d "zte_build" ]
#then
#	echo
#	echo -e "\033[01;31mPlease call me in android root dir!!!\033[0m"
#	echo
#	exit 1
#fi

#if [ $# -lt 1 ]
#then
#	usage
#	exit 1
#fi

################################################################################################
echo -e "\033[01;32mINIT_TARGET_PRODUCT=${INIT_TARGET_PRODUCT}\033[0m"

echo -e "\033[01;32mFINAL_TARGET_PRODUCT=${FINAL_TARGET_PRODUCT}\033[0m"
################################################################################################


root_dir=`pwd`

################################################################################################
KERNEL_MODULES_OUT=${root_dir}/system/lib/modules
function mv-modules()
{
	mdpath=`find ${KERNEL_MODULES_OUT} -type f -name modules.dep`
	if [ "$mdpath" != "" ];then
		mpath=`dirname $mdpath`
		echo mpath=$mpath
		ko=`find $mpath/kernel -type f -name *.ko`
		for i in $ko
		do
			mv $i ${KERNEL_MODULES_OUT}/
		done
	fi
}

function clean-module-folder()
{
	mdpath=`find ${KERNEL_MODULES_OUT} -type f -name modules.dep`
	if [ "$mdpath" != "" ];then
		mpath=`dirname $mdpath`
		rm -rf $mpath
	fi
}
################################################################################################


################################################################################################
export NUBIA_DTS_NAME=msm8976-v1.1-mtp.dtb msm8976-mtp.dtb
export TARGET_PRODUCT=NX591
echo -e "\033[01;32mZTEMT_DTS_NAME = ${ZTEMT_DTS_NAME}\033[0m"

if [ "${KERNEL_PERF_DEFCONFIG}" == "perf" ]
then
	KERNEL_DEFCONFIG=msm-NX591-perf_defconfig
else
	KERNEL_DEFCONFIG=msm-NX591_defconfig
fi
echo -e "\033[01;32mKERNEL_DEFCONFIG = ${KERNEL_DEFCONFIG}\033[0m"
################################################################################################


out_path=${root_dir}/out/${FINAL_TARGET_PRODUCT}
echo -e "\033[01;32m out path: ${out_path}\033[0m"
if [ -d ${out_path} ]
then
	rm -rf ${out_path}
fi

mkdir ${out_path}

echo -e "\033[01;32m======================config build kernel environment value============================\033[0m"
export  PATH=${app_build_root}/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin:${app_build_root}/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin:$PATH
export
echo -e "\033[01;32m=======================================================================================\033[0m"


echo -e "\033[01;32mBuilding .config...\033[0m"
make -C kernel O=${out_path} ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- ${KERNEL_DEFCONFIG}


################################################################################################
echo -e "\033[01;32mBuilding kernel...\033[0m"
make  -C kernel O=${out_path} ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- KCFLAGS=-mno-android  -j`grep processor /proc/cpuinfo |wc -l`
RET_VAL=$?
make -C kernel O=${out_path} ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- KCFLAGS=-mno-android modules
make -C kernel O=${out_path} INSTALL_MOD_PATH=../../system INSTALL_MOD_STRIP=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- modules_install
echo -e "\033[01;32mmv-modules clean-module-folder...\033[0m"
mv-modules
clean-module-folder

if [ $RET_VAL -gt 0 ]
then
	echo -e "\033[01;32m***********************************************************\033[0m"
	echo -e "\033[01;31m         Build error!!! Please see build log above         \033[0m"
	echo -e "\033[01;32m***********************************************************\033[0m"
	exit $RET_VAL
fi
################################################################################################


echo -e "\033[01;32mcp -rf Image.gz-dtb kernel...\033[0m"
cp -rf ${out_path}/arch/arm64/boot/Image.gz-dtb out/kernel




################################################################################################
echo -e "\033[01;32mmkbootimg boot.img...\033[0m"
#BOARD_KERNEL_CMDLINE=`grep "BOARD_KERNEL_CMDLINE :="  device/zte/common/BoardConfig.mk`
#if [ "$BOARD_KERNEL_CMDLINE" == "" ];then
#   	echo Error:BOARD_KERNEL_CMDLINE not found
#   	exit 1
#fi
#KERNEL_CMDLINE=`echo ${BOARD_KERNEL_CMDLINE#*:=}`
#echo KERNEL_CMDLINE=$KERNEL_CMDLINE
kernel_cmdline="console=null androidboot.console=null androidboot.hardware=qcom msm_rtb.filter=0x237 ehci-hcd.park=3 androidboot.bootdevice=7824900.sdhci lpm_levels.sleep_disabled=1 earlyprintk"
out/host/linux-x86/bin/mkbootimg  --kernel out/kernel --ramdisk out/ramdisk.img --cmdline "$kernel_cmdline" --base 0x80000000 --pagesize 2048  --output out/boot.img
#out/host/linux-x86/bin/mkbootimg  --kernel out/kernel --ramdisk out/ramdisk.img --cmdline "console=null androidboot.console=null androidboot.hardware=qcom msm_rtb.filter=0x237 ehci-hcd.park=3 androidboot.bootdevice=7824900.sdhci lpm_levels.sleep_disabled=1 earlyprintk" --base 0x80000000 --pagesize 2048  --output out/boot.img
#out/host/linux-x86/bin/mkbootimg  --kernel out/target/product/${FINAL_TARGET_PRODUCT}/kernel --ramdisk out/target/product/${FINAL_TARGET_PRODUCT}/ramdisk.img --cmdline "$KERNEL_CMDLINE" --base 0x80000000 --pagesize 2048  --output out/target/product/${FINAL_TARGET_PRODUCT}/boot.img
################################################################################################


echo -e "\033[01;32mboot_signer boot.img...\033[0m"
#out/host/linux-x86/bin/boot_signer /boot out/boot.img out/target/security/verity.pk8 out/target/security/verity.x509.pem out/boot.img
mv system out/NX591J/


echo "[01;32m==================================================================[0m"
echo "Now, the boot.img images are in dir:"
echo -e "\033[01;32m${app_build_root}/out/target/product/${FINAL_TARGET_PRODUCT}/boot.img\033[0m"
echo "[01;32m==================================================================[0m"


echo "=============================================="
echo          Build finished at `date`.
echo "=============================================="


### DO NOT EDIT THIS FILE ###
